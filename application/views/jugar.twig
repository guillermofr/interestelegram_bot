{% extends 'layout.twig' %}

{% block head %}
	<link rel="stylesheet" type="text/css" href="/assets/css/csshake.min.css">
	<style type="text/css">
		canvas {
			transition: all 1s;
		}
		canvas.under_attack {

		}
		canvas.impact {
			border : 2px solid red;
			box-shadow: 0 0 10px red;
		}
		canvas.targeted {
			border : 2px solid gold;
			box-shadow: 0 0 10px gold;
		}
		canvas.destroyed {
			display : none;
		}
	</style>
{% endblock %}

{% block content %}

	{% if logueado %}

		{% if dead %}

			<form method="POST" action="/action/revive">
				<h2>Estás muerto</h2>
				<p>Podrás seguir jugando desde cero, pero necesitarás revivir.</p>

			    <span style="display:block;">
			    	<button type="submit" class="btn btn-2 btn-2a">Revivir!</button>
				</span>
			</form>

		{% else %}

			{% if user.fullname %}

				<div class="container">

					<script src="/assets/js/ocanvas-2.8.6.min.js" type="text/javascript"></script>
                    <div id="hud">
						<canvas id="canvas" width="300" height="300" style="margin-top:40px;border: 2px solid #5e3f6b;background: #5e3f6b;" ></canvas>
    				    <div id="hud_controls" style="width:500px; margin: 20px auto; text-align: center;">
    				        <button class="control" value="izquierda" data-action="/action/move/left" >Izquierda</button>
    				        <button class="control" value="recto" data-action="/action/move/forward" >Recto</button>
    				        <button class="control" value="derecha" data-action="/action/move/right" >Derecha</button>
    				        <button class="control" value="giro" data-action="/action/move/turn" >Giro</button>
    				        <button class="control" value="attack" data-action="/action/attack" >Atacar</button>
    				    </div>
                    </div>
				    <div id="target" style="width:500px; margin: 20px auto; text-align: center;">
				        
				    </div>
				    <div id="log" style="width:500px; margin: 20px auto; text-align: left; font-family: monospace; font-size: 12px; color: #FFF;">

				    </div>

    				<script src="http://www.inter.es:30000/socket.io/socket.io.js"></script>
				    <script type="text/javascript">

                        var INTER = {};
                        INTER.canvas = {
                            hud : document.getElementById('hud'),
                            hud_controls : document.getElementById('hud_controls'),
                            canvas : oCanvas.create({
                                canvas: "#canvas",
                                background: "#222",
                                fps: 60
                            }),
                            content : {
                                data: [],
                                cache: {},
                                loaded: 0,
                                direction: 0,
                                moved: false
                            },
                            mainShipId: null,
                            mainShip: null,
                            bind_controls: function() {
                                $('.control').unbind('click').click(function(){
                                    if ($(this).attr('data-action').indexOf('move')>0) {
                                        INTER.canvas.content.direction = 0;
                                        if ($(this).attr('data-action').indexOf('left')>0) INTER.canvas.content.direction = -1;
                                        if ($(this).attr('data-action').indexOf('right')>0) INTER.canvas.content.direction = 1;
                                    }
                                    $.post($(this).attr('data-action'),
                                        {},
                                        function(response){
                                            INTER.canvas.content.moved = (INTER.canvas.mainShip.x != response.map.ms.x || INTER.canvas.mainShip.y != response.map.ms.y);
                                            INTER.canvas.mainShip = response.map.ms;
                                            INTER.canvas.update(response.map.content);
                                            INTER.canvas.log(typeof response.data.messages != 'undefined' ? response.data.messages : []);
                                            INTER.canvas.targets(typeof response.map.os != 'undefined' ? response.map.os : []);
                                            INTER.canvas.bind_controls();
                                        }
                                    );
                                });
                            },
                            update : function(data) {
                                INTER.canvas.content.data = data;
                                for (var i in INTER.canvas.content.cache) {
                                    INTER.canvas.content.cache[i].updated = false;
                                }
                                for (var i = 0; i < INTER.canvas.content.data.length; i++) {
                                    INTER.canvas.load(i);
                                }
                                for (var i = 0; i < INTER.canvas.content.data.length; i++) {
                                    INTER.canvas.draw(i);
                                }
                                if (INTER.canvas.content.moved) INTER.canvas.dash();
                                for (var i in INTER.canvas.content.cache) {
                                    if (!INTER.canvas.content.cache[i].updated) {
                                        delete INTER.canvas.content.cache[i];
                                    }
                                }
                            },
                            load : function(i) {
                                if (typeof INTER.canvas.content.cache[INTER.canvas.content.data[i].id] != 'undefined') {
                                    INTER.canvas.content.data[i].prev = INTER.canvas.content.cache[INTER.canvas.content.data[i].id];
                                }

                                if (typeof INTER.canvas.content.data[i].prev != 'undefined') {
                                    INTER.canvas.content.data[i].current_i = INTER.canvas.content.data[i].prev.i;
                                    INTER.canvas.content.data[i].current_a = INTER.canvas.content.data[i].prev.a;
                                    INTER.canvas.content.data[i].current_x = INTER.canvas.content.data[i].prev.x;
                                    INTER.canvas.content.data[i].current_y = INTER.canvas.content.data[i].prev.y;
                                    INTER.canvas.content.data[i].new_x = INTER.canvas.content.data[i].x;
                                    INTER.canvas.content.data[i].new_y = INTER.canvas.content.data[i].y;
                                } else {
                                    INTER.canvas.content.data[i].current_i = INTER.canvas.content.data[i].i;
                                    INTER.canvas.content.data[i].current_a = INTER.canvas.content.data[i].a;
                                    INTER.canvas.content.data[i].current_x = INTER.canvas.content.data[i].x;
                                    INTER.canvas.content.data[i].current_y = INTER.canvas.content.data[i].y;
                                    INTER.canvas.content.data[i].new_x = INTER.canvas.content.data[i].x;
                                    INTER.canvas.content.data[i].new_y = INTER.canvas.content.data[i].y;
                                }
                                
                                INTER.canvas.content.data[i].o = INTER.canvas.canvas.display.image({
                                    x: INTER.canvas.content.data[i].current_x,
                                    y: INTER.canvas.content.data[i].current_y,
                                    origin: { x: "center", y: "center" },
                                    image: INTER.canvas.content.data[i].i
                                });

                                INTER.canvas.content.cache[INTER.canvas.content.data[i].id] = INTER.canvas.content.data[i];

                                INTER.canvas.content.cache[INTER.canvas.content.data[i].id].updated = true;
                            },
                            draw : function(i) {
                                if (INTER.canvas.content.data[i].current_x != INTER.canvas.content.data[i].new_x || INTER.canvas.content.data[i].current_y != INTER.canvas.content.data[i].new_y) {
                                    if (INTER.canvas.content.data[i].a > 0) {
                                        INTER.canvas.content.data[i].o.rotate(INTER.canvas.content.data[i].a);
                                    }
                                    INTER.canvas.canvas.addChild(INTER.canvas.content.data[i].o);
                                    INTER.canvas.content.data[i].o.animate({
                                        x: INTER.canvas.content.data[i].new_x,
                                        y: INTER.canvas.content.data[i].new_y
                                    }, {
                                        duration: "long",
                                        easing: "ease-in-out-cubic"
                                    });
                                } else {
                                    if (INTER.canvas.content.data[i].id == INTER.canvas.mainShipId || INTER.canvas.content.data[i].id == (INTER.canvas.mainShipId+'s')) {
                                        if (INTER.canvas.content.data[i].i != INTER.canvas.content.data[i].current_i) {
                                            var rotation = (INTER.canvas.content.direction > 0) ? parseInt(INTER.canvas.content.data[i].a)-45 : parseInt(INTER.canvas.content.data[i].a)+45;
                                            INTER.canvas.content.data[i].o.rotate(rotation);
                                            INTER.canvas.canvas.addChild(INTER.canvas.content.data[i].o);
                                            INTER.canvas.content.data[i].o.animate({
                                                rotation: INTER.canvas.content.data[i].a
                                            }, {
                                                duration: "long",
                                                easing: "ease-in-out-cubic"
                                            });
                                            INTER.canvas.content.data[i].current_a = INTER.canvas.content.data[i].a;
                                        } else {
                                            INTER.canvas.content.data[i].o.rotate(INTER.canvas.content.data[i].a);
                                            INTER.canvas.canvas.addChild(INTER.canvas.content.data[i].o);
                                            INTER.canvas.content.data[i].current_a = INTER.canvas.content.data[i].a;
                                        }
                                    } else {
                                        if (INTER.canvas.content.data[i].a > 0) {
                                            INTER.canvas.content.data[i].o.rotate(INTER.canvas.content.data[i].a);
                                        }
                                        INTER.canvas.canvas.addChild(INTER.canvas.content.data[i].o);
                                    }
                                }
                            },
                            dash: function() {
                                var angle = INTER.canvas.content.cache[INTER.canvas.mainShipId].a;
                                var rotated = (INTER.canvas.content.cache[INTER.canvas.mainShipId].i.indexOf('rotated') > 0);
                                var exit_angle = rotated ? angle+45 : angle;
                                var image = rotated ? '/imgs/map/dash_rotated.png' : '/imgs/map/dash.png'
                                var dash = INTER.canvas.canvas.display.image({
                                    x: 150,
                                    y: 150,
                                    origin: { x: "center", y: "center" },
                                    image: image,
                                    opacity: 0.5
                                });
                                dash.rotate(angle);
                                INTER.canvas.canvas.addChild(dash);
                                var exitPoint = INTER.canvas.findPoint(INTER.canvas.content.cache[INTER.canvas.mainShipId].current_x, INTER.canvas.content.cache[INTER.canvas.mainShipId].current_y, INTER.canvas.mainShip.angle, -100);
                                dash.animate({
                                    x: exitPoint.x,
                                    y: exitPoint.y,
                                    opacity: 0
                                }, {
                                    duration: 1500,
                                    easing: "ease-in-out-cubic"
                                });
                            },
                            log: function(messages) {
                                $('#log').html('');
                                if (messages == null) return;
                                for (var i = 0; i < messages.length; i++) {
                                    $('#log').append('<p>' + messages[i] + '</p>');
                                }
                            },
                            targets: function(ships) {
                                $('#target').html('');
                                for (var i = 0; i < ships.length; i++) {
                                    $('#target').append('<button class="control" data-action="/action/target/' + ships[i].id + '" >Fijar a ' + ships[i].name + '</button>');
                                }
                            },
                            findPoint: function(x, y, angle, distance) {
                                return {
                                    x: x + (distance * Math.round(Math.cos((angle-90)*(Math.PI / 180)))),
                                    y: y + (distance * Math.round(Math.sin((angle-90)*(Math.PI / 180))))
                                };
                            },
                            // not used
                            findEntrance: function(obj, angle) {
                                console.log(angle);
                                switch(angle) {
                                    case 0:
                                        obj.o.moveTo(obj.new_x, obj.new_y + 100);
                                        break;
                                    case 45:
                                        obj.o.moveTo(obj.new_x + 100, obj.new_y + 100);
                                        break;
                                    case 90:
                                        obj.o.moveTo(obj.new_x + 100, obj.new_y);
                                        break;
                                    case 135:
                                        obj.o.moveTo(obj.new_x + 100, obj.new_y - 100);
                                        break;
                                    case 180:
                                        obj.o.moveTo(obj.new_x, obj.new_y - 100);
                                        break;
                                    case 225:
                                        obj.o.moveTo(obj.new_x - 100, obj.new_y - 100);
                                        break;
                                    case 270:
                                        obj.o.moveTo(obj.new_x - 100, obj.new_y);
                                        break;
                                    case 315:
                                        obj.o.moveTo(obj.new_x - 100, obj.new_y + 100);
                                        break;
                                }
                            }
                        };
        
				        var data = {{data|raw}};
				        INTER.canvas.mainShipId = 's'+data.ms.id;
						INTER.canvas.mainShip = data.ms;
						INTER.canvas.update(data.content);
						INTER.canvas.targets(typeof data.os != 'undefined' ? data.os : []);

				        /* Communications layer */
				        var user_id = {{user_id}};
				        INTER.communications = {
				            socket : null,
				            init : function(){
				                INTER.communications.socket = io('http://www.inter.es:30000');
				                INTER.communications.socket.on('connect', INTER.communications.connect);
				                INTER.communications.socket.on('client_message', INTER.communications.message_recieved);
				            },
				            connect : function(){
				                console.log('Connected', INTER.communications.socket.id, user_id);
				                INTER.communications.socket.emit('identify', { id : user_id });
				            },
				            message_recieved : function(data){
				                console.log('message recived', data);

				                if ( 'undefined' !== typeof data.action ) {
				                	if ( 'undefined' !== typeof INTER.responseActions[data.action] ) {
				                		INTER.responseActions[data.action](data);
				                	} else {
				                		console.log('undefined action');
				                		alert('message recieved, '+ data.action +' action is undefined');
				                	}
				                } else {
				                	alert('message recieved that is not an action');
				                }
				            }
				        };
				        /* Communication responses actions layer */
				        INTER.responseActions = {
				        	under_attack : function(data){
				        		INTER.canvas.log(['Estamos siendo atacados por ' + data.from]);
				        		INTER.canvas.canvas.classList.add('under_attack');
				        		INTER.canvas.canvas.classList.add('shake-chunk');
				        		INTER.canvas.canvas.classList.add('impact');
								setTimeout(function(){
				        			INTER.canvas.canvas.classList.remove('shake-chunk');
				        			INTER.canvas.canvas.classList.remove('under_attack');
				        			INTER.canvas.canvas.classList.remove('impact');
				        		}, 2000);
				        		INTER.mediaPlayer.playAudio('/assets/sounds/under_attack.mp3', function(){
				        			INTER.mediaPlayer.playAudio('/assets/sounds/impact.mp3');
				        		});
				        	},
				        	destroyed : function(data){
				        		INTER.canvas.log(['Hemos sido destruidos por ' + data.from]);
				        		INTER.canvas.canvas.classList.add('shake-hard');
				        		INTER.canvas.canvas.classList.add('destroyed');
				        		INTER.mediaPlayer.playAudio('/assets/sounds/destroyed.mp3');
				        		setTimeout(function(){
				        			INTER.canvas.canvas.classList.remove('shake-little');
				        			alert('Hemos sido destruidos por ' + data.from);
				        			document.location.href = 'http://www.inter.es/jugar';
				        		}, 3000);
				        	},
				        	locked_as_target : function(data){
				        		INTER.canvas.log(['Somos el objetivo de ' + data.from]);
				        		INTER.canvas.canvas.classList.add('shake-little');
				        		INTER.canvas.canvas.classList.add('targeted');
				        		INTER.mediaPlayer.playAudio('/assets/sounds/targetted.mp3');
				        		setTimeout(function(){
				        			INTER.canvas.canvas.classList.remove('shake-little');
				        			INTER.canvas.canvas.classList.remove('targeted');
				        		}, 2000);
				        	},
				        	dodged_attack : function(data){
				        		INTER.canvas.log(['PUFF! por los pelos, hemos esquivado un ataque de ' + data.from]);
				        		INTER.canvas.canvas.classList.add('shake-opacity');
				        		INTER.canvas.canvas.classList.add('under_attack');
				        		INTER.mediaPlayer.playAudio('/assets/sounds/dodge.mp3');
								setTimeout(function(){
				        			INTER.canvas.canvas.classList.remove('shake-opacity');
				        			INTER.canvas.canvas.classList.remove('under_attack');
				        		}, 2000);
				        	},
				        	announcement : function(data){
				        		INTER.canvas.log(['GLOBAL ANNOUNCEMENT: ' + data.message]);
				        	},
				        	gandalf : function(){
				        		var gandalf = document.createElement('div');
				        		gandalf.innerHTML = '<iframe width="560" height="315" src="https://www.youtube.com/embed/FRBh2ftywLM?rel=0&autoplay=1&controls=0&loop=1&playlist=FRBh2ftywLM&showinfo=0" frameborder="0" allowfullscreen></iframe>';
				        		INTER.canvas.hud.parentNode.replaceChild(gandalf, INTER.canvas.hud);
			        		},
			        		gandalflocal : function(){
			        			INTER.mediaPlayer.playVideo('/assets/videos/gandalfsax.mov', {
			        				loop : true,
			        				onStart : function(video){
			        					INTER.canvas.hud.parentNode.replaceChild(video, INTER.canvas.hud);
			        				}
			        			});
			        		},
			        		gandalffull : function(){
				        		INTER.mediaPlayer.playVideo('/assets/videos/gandalfsax.mov', {
			        				loop : true,
			        				onStart : function(video){
			        					var body = document.getElementsByTagName("BODY")[0];
			        					//body.innerHTML = '';
			        					body.appendChild(video);
			        					video.style.width = "auto";
			        					video.style.height = "auto";
			        					video.style.position = "fixed";
			        					video.style.right = 0;
			        					video.style.bottom = 0;
			        					video.style['min-width'] = "100%";
			        					video.style['min-height'] = "100%";
			        					if ( video.clientWidth > window.innerWidth ) video.style.left = ( ( window.innerWidth - video.clientWidth ) / 2 ) + 'px';
			        					window.addEventListener('resize', function(){
			        						if ( video.clientWidth > window.innerWidth ) video.style.left = ( ( window.innerWidth - video.clientWidth ) / 2 ) + 'px';
			        					});
			        				}
			        			});
			        		}
				        };

				        /* Inter media */
				        INTER.mediaPlayer = {
				        	play : function(type, src, opt, cb){
				        		if ('undefined' === typeof cb && 'function' === typeof opt) { cb = opt; opt = {}; }
				        		else if ('undefined' === typeof opt) 
				        			opt = { numTimes : 1,
					        				loop : false,
					        				onStart : null,
					        				onProgress : null };
				        		/* Test loop playing, play N times and other kind of stuff */
				        		var times = 0;
				        		var media = document.createElement(type);
				        		media.loop = opt.loop;
				        		media.addEventListener('progress', function(e){
				        			e.preventDefault();
				        			if ('function' === typeof opt.onProgress) opt.onProgress(e. media);
				        		});
				        		media.addEventListener('canplay', function(e){ 
				        			e.preventDefault(); 
				        			media.play(); 
				        			if ('function' === typeof opt.onStart) opt.onStart(media);
				        		});
				        		media.addEventListener('ended', function(e){ 
				        			e.preventDefault(); 
				        			times++;
				        			if ( opt.loop && times < numTimes ) {

				        			} else {
					        			media.src=''; 
					        			media = null; 
					        			if( 'function' === typeof cb ) cb();
				        			}
				        		});
				        		media.src = src;
				        		media.load();
				        	},
				        	playAudio : function(src, opt, cb){ INTER.mediaPlayer.play('audio', src, opt, cb); },
				        	playVideo : function(src, opt, cb){ INTER.mediaPlayer.play('video', src, opt, cb); }
				        }

				    </script>
				    <script type="text/javascript">
				    $.fn.ready(function(){
				        INTER.canvas.bind_controls();
        				INTER.communications.init();
				    });
				    </script>

				</div>

		    {% else %}

			    <form method="POST" action="/login/setNick">
					<h2>No hemos encontrado tu correo en la base de datos de participantes de la MurciaLanParty.</h2>
					<p>Para poder jugar necesitas terner un nombre</p>
					<p>Al no ser participante de la MLP no podrás optar a premios, pero podrás jugar como los demás y fastidiarles la racha!</p>

					<span>Nave de <input type="text" name="nick" placeholder="Nick/Apodo" id='nick_input'/></span>

				    <span style="display:block;">
				    	<button type="submit" class="btn btn-2 btn-2a">Guardar Nick</button>
					</span>
				</form>
		   
		    {% endif %}

		{% endif %}

    {% else %}

    <h2>Necesitas estar logueado para participar en la partida</h2>
    <form style="width: 56%;margin: auto;" method="POST" action="/login">
    	<label for="email">Introduce el correo electrónico con el que te diste de alta en la <b>MurciaLanParty</b>.</label>
    	<input type="email" name="email" placeholder="Correo electrónico" id="login_input"/>
    	<button type="submit" class="btn btn-2 btn-2a">Login</button>
    	<p>Esta página no necesita preguntarte una clave o contraseña, al darnos tu 
    	dirección de correo, la comprobaremos en la base de datos de la Murcia lan party y 
    	te enviaremos un correo con un link para entrar a jugar.</p>
    	<p>Al darnos tu correo de registro en la <b>MurciaLanParty</b>, podremos reconocerte como participante y podrás optar a los premios de la competición.</p>
    	<p>Los usuarios registrados que no sean participantes podrán entrar a jugar sin opción a premio.</p>
    	<p>No hay ningún problema por tener multicuenta para participar</p>
    </form>


    {% endif %}

{% endblock %}